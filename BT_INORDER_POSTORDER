class Solution {
public:
    TreeNode* buildtreepostin(vector<int>& inorder,int is,int ie, vector<int>& postorder,int ps,int pe,map<int,int>&mpp){
        if(ps>pe || is>ie)return nullptr;
        TreeNode* root=new TreeNode(postorder[pe]);
        int inroot=mpp[postorder[pe]];
        int numsleft=inroot-is;

        root->left=buildtreepostin(inorder,is,inroot-1,postorder,ps,ps+numsleft-1,mpp);
        root->right=buildtreepostin(inorder,inroot+1,ie,postorder,ps+numsleft,pe-1,mpp);
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if(inorder.size()!=postorder.size()){
            return nullptr;
        }
        map<int,int>mpp;
        for(int i=0;i<inorder.size();i++){
            mpp[inorder[i]]=i;
        }
        return buildtreepostin(inorder,0,inorder.size()-1,postorder,0,postorder.size()-1,mpp);
    }
};